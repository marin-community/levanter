ARG IMAGE=ghcr.io/stanford-crfm/levanter-base
ARG TAG=latest

FROM ${IMAGE}:${TAG}

# Ensure we have root privileges for package installation (some base images default to a non-root user)
USER root

# This usually is a config directory so users can have their own config directory outside the repo.
ARG EXTRA_CTX=/config

# Install gcsfuse - fix GPG signature issues
RUN apt-get update --allow-insecure-repositories || apt-get update -o Acquire::Check-Valid-Until=false -o Acquire::Check-Date=false
RUN apt-get install -y --allow-unauthenticated lsb-release curl || apt-get install -y lsb-release curl
RUN export GCSFUSE_REPO=gcsfuse-$(lsb_release -c -s) && \
    echo "deb https://packages.cloud.google.com/apt $GCSFUSE_REPO main" | tee /etc/apt/sources.list.d/gcsfuse.list
RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
RUN apt-get update && apt-get install -y fuse gcsfuse

# Install Google Cloud SDK (gcloud) for secret access and configuration
RUN apt-get update && apt-get install -y apt-transport-https ca-certificates gnupg && \
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" > /etc/apt/sources.list.d/google-cloud-sdk.list && \
    apt-get update && apt-get install -y google-cloud-cli

# Create gcsfuse mount directory
RUN mkdir -p /opt/gcsfuse_mount && chmod 755 /opt/gcsfuse_mount

ENV TENSORSTORE_CURL_LOW_SPEED_TIME_SECONDS=60\
    TENSORSTORE_CURL_LOW_SPEED_LIMIT_BYTES=1024\
    RAY_USAGE_STATS_ENABLED=0\
    PATH=/opt/levanter/.venv/bin:$PATH\
    PYTHONPATH=/opt/levanter:/opt/levanter/src:/opt/levanter/examples:/opt/levanter/tests\
    HOME=/home/levanter

# Cluster-specific defaults
ENV CLOUDSDK_CORE_PROJECT=hai-gcp-models \
    CLOUDSDK_COMPUTE_REGION=us-central2 \
    CLOUDSDK_COMPUTE_ZONE=us-central2-b \
    MARIN_PREFIX=gs://marin-us-central2 \
    BUCKET=marin-us-central2 \
    AUTOSCALER_HEARTBEAT_TIMEOUT_S=600

ENV XLA_USE_F16=0 \
    XLA_USE_BF16=0 \
    XLA_DOWNCAST_BF16=0 \
    JAX_DEFAULT_MATMUL_PRECISION=highest

# Add XLA debugging environment variables
ENV XLA_FLAGS="--xla_dump_to=/tmp/xla_dumps --xla_dump_hlo_as_text --xla_dump_hlo_pass_re=.*" \
    XLA_SAVE_TENSORS_FILE="/tmp/xla_dumps/xla_tensors.txt" \
    XLA_SAVE_TENSORS_FMT="text"

# Create XLA dump directory
RUN mkdir -p /tmp/xla_dumps && chmod 777 /tmp/xla_dumps


# Prepare credential/cache directories expected by runtime setup
RUN mkdir -p /home/levanter/.cache/huggingface /home/levanter/.cache/openai

WORKDIR /opt/levanter

ADD pyproject.toml README.md /opt/levanter/
RUN mkdir -p /opt/levanter/src/levanter
RUN pip install -e '.[test]'
RUN pip install "lm-eval@git+https://github.com/dlwh/lm-evaluation-harness.git@no_torch"
RUN pip install "draccus@git+https://github.com/dlwh/draccus.git"
# Copy the rest of the source (including any local haliax/ folder)
ADD . /opt/levanter

# Override PYTHONPATH to prioritize local haliax over PyPI version
ENV PYTHONPATH=/opt/levanter/haliax/src:$PYTHONPATH

# Install haliax from the local source to override the PyPI version
RUN echo "=== HALIAX INSTALLATION DEBUG ===" && \
    echo "Current PATH: $PATH" && \
    echo "Which pip: $(which pip)" && \
    ls -la /opt/levanter/ | grep haliax || echo "No haliax directory found" && \
    if [ -d /opt/levanter/haliax ]; then \
      echo "Found local haliax directory at /opt/levanter/haliax" && \
      ls -la /opt/levanter/haliax/src/haliax/ | head -10 && \
      echo "Checking venv setup and uninstalling existing haliax..." && \
      ls -la /opt/levanter/.venv/bin/ | grep pip || echo "venv pip not found" && \
      which python && python --version && \
      pip uninstall -y haliax || true && \
      echo "Installing local haliax in editable mode..." && \
      pip install -e /opt/levanter/haliax && \
      echo "Local haliax installation completed" && \
      pip show haliax || echo "pip show failed, checking install location..." && \
      ls -la /opt/levanter/.venv/lib/python3.10/site-packages/ | grep haliax || echo "haliax not found in venv" && \
      echo "Verifying local haliax - checking for debug prints in partitioning.py:" && \
      grep -n "DEBUG.*WrappedCallable" /opt/levanter/haliax/src/haliax/partitioning.py || echo "No debug prints found" && \
      echo "Skipping JAX import test during build (will work on TPU runtime)" && \
      echo "=== HALIAX INSTALLATION SUCCESS ==="; \
    else \
      echo "No local haliax directory found, using PyPI version" && \
      echo "=== USING PYPI HALIAX ==="; \
    fi

# Add $EXTRA_CTX to the same location as in local machine.
# it's already in the image, so we don't need to copy it. just move it if we set EXTRA_CTX
RUN if [ -f ".mnt" ] || [ -d ".mnt" ]; then mkdir -p $(dirname $EXTRA_CTX) && mv .mnt $EXTRA_CTX; fi

# Create entrypoint script that mounts GCS bucket and runs the original command
RUN echo '#!/bin/bash' > /opt/entrypoint.sh && \
    echo 'set -e' >> /opt/entrypoint.sh && \
    echo '' >> /opt/entrypoint.sh && \
    echo '# Mount GCS bucket inside container' >> /opt/entrypoint.sh && \
    echo 'echo "Mounting GCS bucket marin-us-central2 to /opt/gcsfuse_mount..."' >> /opt/entrypoint.sh && \
    echo 'gcsfuse --implicit-dirs --cache-dir /dev/shm --file-cache-max-size-mb 160000 --client-protocol grpc --only-dir gcsfuse_mount $BUCKET /opt/gcsfuse_mount || true' >> /opt/entrypoint.sh && \
    echo '' >> /opt/entrypoint.sh && \
    echo '# Check if mount was successful' >> /opt/entrypoint.sh && \
    echo 'if mountpoint -q /opt/gcsfuse_mount; then' >> /opt/entrypoint.sh && \
    echo '    echo "GCS bucket successfully mounted at /opt/gcsfuse_mount"' >> /opt/entrypoint.sh && \
    echo '    ls -la /opt/gcsfuse_mount/ || true' >> /opt/entrypoint.sh && \
    echo 'else' >> /opt/entrypoint.sh && \
    echo '    echo "Warning: /opt/gcsfuse_mount is not a mount point"' >> /opt/entrypoint.sh && \
    echo 'fi' >> /opt/entrypoint.sh && \
    echo '' >> /opt/entrypoint.sh && \
    echo '# Execute the original command' >> /opt/entrypoint.sh && \
    echo 'exec "$@"' >> /opt/entrypoint.sh

# Append cluster-specific runtime setup to entrypoint
RUN echo '# Cluster-specific setup' >> /opt/entrypoint.sh && \
    echo 'gcloud auth configure-docker us-central2-docker.pkg.dev --quiet || true' >> /opt/entrypoint.sh && \
    echo 'gcloud config set project hai-gcp-models || true' >> /opt/entrypoint.sh && \
    echo 'gcloud config set compute/region us-central2 || true' >> /opt/entrypoint.sh && \
    echo 'gcloud config set compute/zone us-central2-b || true' >> /opt/entrypoint.sh && \
    echo 'mkdir -p $HOME/.cache/huggingface $HOME/.cache/openai' >> /opt/entrypoint.sh && \
    echo 'gcloud secrets versions access latest --secret=HF_TOKEN > $HOME/.cache/huggingface/token || true' >> /opt/entrypoint.sh && \
    echo 'gcloud secrets versions access latest --secret=OPENAI_API_KEY > $HOME/.cache/openai/token || true' >> /opt/entrypoint.sh && \
    echo 'mkdir -p /home/ray/.ssh && gcloud compute project-info describe --format="value(commonInstanceMetadata.items[?key==\\"ssh-keys\\"].value)" > /home/ray/.ssh/authorized_keys && chmod 600 /home/ray/.ssh/authorized_keys || true' >> /opt/entrypoint.sh && \
    echo 'gcloud secrets versions access latest --secret=RAY_CLUSTER_PUBLIC_KEY > ~/.ssh/marin_ray_cluster.pub || true' >> /opt/entrypoint.sh

RUN chmod +x /opt/entrypoint.sh

ENTRYPOINT ["/opt/entrypoint.sh"]
