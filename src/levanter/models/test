
Traceback (most recent call last):
  File "/opt/levanter/src/levanter/main/train_lm.py", line 278, in <module>
    levanter.config.main(main)()
  File "/opt/levanter/src/levanter/config.py", line 100, in wrapper_inner
    response = fn(cfg, *args, **kwargs)
  File "/opt/levanter/src/levanter/main/train_lm.py", line 147, in main
    state = trainer.initial_state(training_key, model_init=lambda: config.model.build(Vocab, key=model_key))
  File "/opt/levanter/src/levanter/trainer.py", line 356, in initial_state
    trainer_state_shape = eqx.filter_eval_shape(init_state_and_model, model_init, training_key)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/equinox/_eval_shape.py", line 38, in filter_eval_shape
    dynamic_out, static_out = jax.eval_shape(ft.partial(_fn, static), dynamic)
  File "/opt/levanter/src/levanter/trainer.py", line 343, in init_state_and_model
    model = model_init()
  File "/opt/levanter/src/levanter/main/train_lm.py", line 147, in <lambda>
    state = trainer.initial_state(training_key, model_init=lambda: config.model.build(Vocab, key=model_key))
  File "/opt/levanter/src/levanter/models/lm_model.py", line 147, in build
    return self.model_type.init(Vocab, self, key=key)  # type: ignore
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 569, in init
    transformer = GptOssTransformer.init(config, key=k_t)
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 382, in init
    layers = S.init(config.Layers, GptOssDecoderLayer, gradient_checkpointing=config.gradient_checkpointing)(
  File "/opt/levanter/haliax/src/haliax/nn/scan.py", line 441, in fn
    stacked = haliax.vmap(module.init, Block)(*args, **kwargs)
  File "/opt/levanter/haliax/src/haliax/hof.py", line 147, in wrapped_vmap_fn
    result_dynamic, result_static = jax.vmap(
  File "/opt/levanter/haliax/src/haliax/hof.py", line 135, in wrapped_fn
    out = fn(*unchilled_args, **unchilled_kwargs)
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 344, in init
    block_sparse_moe = GptOssSparseMoeBlock.init(config, key=k_moe)
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 218, in init
    experts = GptOssExperts.init(
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 191, in init
    gate_up_proj = hnn.MoELinear.init(Experts=Experts, Out=Mlp2, In=Embed, key=k1, use_bias=use_bias)
  File "/opt/levanter/haliax/src/haliax/nn/linear.py", line 177, in init
    weight = hax.random.truncated_normal(key, joint_spec, -3, 3) * (init_scale / math.sqrt(input_size))
  File "/usr/local/lib/python3.10/contextlib.py", line 79, in inner
    return func(*args, **kwds)
  File "/opt/levanter/haliax/src/haliax/random.py", line 128, in truncated_normal
    return haliax.auto_sharded(NamedArray(jax_array, shape))
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 117, in auto_sharded
    return shard(x, mapping=mapping, mesh=mesh)
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 172, in shard
    return htu.tree_map(_do_device_put, x)
  File "/opt/levanter/haliax/src/haliax/tree_util.py", line 28, in tree_map
    return jax.tree.map(fn, tree, *rest, is_leaf=is_leaf)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/jax/_src/tree.py", line 155, in map
    return tree_util.tree_map(f, tree, *rest, is_leaf=is_leaf)
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 158, in _do_device_put
    sharding = infer_resource_partitions(named, mapping, mesh=mesh, preserve_existing_shardings=False)
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 306, in infer_resource_partitions
    return htu.tree_map(to_sharding, tree, pspecs)
  File "/opt/levanter/haliax/src/haliax/tree_util.py", line 28, in tree_map
    return jax.tree.map(fn, tree, *rest, is_leaf=is_leaf)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/jax/_src/tree.py", line 155, in map
    return tree_util.tree_map(f, tree, *rest, is_leaf=is_leaf)
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 304, in to_sharding
    return NamedSharding(mesh, spec)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/jax/_src/named_sharding.py", line 460, in check_pspec
    _check_unique_resources(spec, "NamedSharding spec", mesh)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/jax/_src/named_sharding.py", line 489, in _check_unique_resources
    raise DuplicateSpecError(
jax._src.named_sharding.DuplicateSpecError: A single NamedSharding spec specification can map every mesh axis to at most one positional dimension, but PartitionSpec('model', None, 'model') has duplicate entries for `model`
jax.errors.SimplifiedTraceback: For simplicity, JAX has removed its internal frames from the traceback of the following exception. Set JAX_TRACEBACK_FILTERING=off to include these.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/levanter/src/levanter/main/train_lm.py", line 278, in <module>
    levanter.config.main(main)()
  File "/opt/levanter/src/levanter/config.py", line 100, in wrapper_inner
    response = fn(cfg, *args, **kwargs)
  File "/opt/levanter/src/levanter/main/train_lm.py", line 147, in main
    state = trainer.initial_state(training_key, model_init=lambda: config.model.build(Vocab, key=model_key))
  File "/opt/levanter/src/levanter/trainer.py", line 356, in initial_state
    trainer_state_shape = eqx.filter_eval_shape(init_state_and_model, model_init, training_key)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/equinox/_eval_shape.py", line 38, in filter_eval_shape
    dynamic_out, static_out = jax.eval_shape(ft.partial(_fn, static), dynamic)
  File "/opt/levanter/src/levanter/trainer.py", line 343, in init_state_and_model
    model = model_init()
  File "/opt/levanter/src/levanter/main/train_lm.py", line 147, in <lambda>
    state = trainer.initial_state(training_key, model_init=lambda: config.model.build(Vocab, key=model_key))
  File "/opt/levanter/src/levanter/models/lm_model.py", line 147, in build
    return self.model_type.init(Vocab, self, key=key)  # type: ignore
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 569, in init
    transformer = GptOssTransformer.init(config, key=k_t)
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 382, in init
    layers = S.init(config.Layers, GptOssDecoderLayer, gradient_checkpointing=config.gradient_checkpointing)(
  File "/opt/levanter/haliax/src/haliax/nn/scan.py", line 441, in fn
    stacked = haliax.vmap(module.init, Block)(*args, **kwargs)
  File "/opt/levanter/haliax/src/haliax/hof.py", line 147, in wrapped_vmap_fn
    result_dynamic, result_static = jax.vmap(
  File "/opt/levanter/haliax/src/haliax/hof.py", line 135, in wrapped_fn
    out = fn(*unchilled_args, **unchilled_kwargs)
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 344, in init
    block_sparse_moe = GptOssSparseMoeBlock.init(config, key=k_moe)
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 218, in init
    experts = GptOssExperts.init(
  File "/opt/levanter/src/levanter/models/gpt_oss.py", line 191, in init
    gate_up_proj = hnn.MoELinear.init(Experts=Experts, Out=Mlp2, In=Embed, key=k1, use_bias=use_bias)
  File "/opt/levanter/haliax/src/haliax/nn/linear.py", line 177, in init
    weight = hax.random.truncated_normal(key, joint_spec, -3, 3) * (init_scale / math.sqrt(input_size))
  File "/usr/local/lib/python3.10/contextlib.py", line 79, in inner
    return func(*args, **kwds)
  File "/opt/levanter/haliax/src/haliax/random.py", line 128, in truncated_normal
    return haliax.auto_sharded(NamedArray(jax_array, shape))
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 117, in auto_sharded
    return shard(x, mapping=mapping, mesh=mesh)
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 172, in shard
    return htu.tree_map(_do_device_put, x)
  File "/opt/levanter/haliax/src/haliax/tree_util.py", line 28, in tree_map
    return jax.tree.map(fn, tree, *rest, is_leaf=is_leaf)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/jax/_src/tree.py", line 155, in map
    return tree_util.tree_map(f, tree, *rest, is_leaf=is_leaf)
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 158, in _do_device_put
    sharding = infer_resource_partitions(named, mapping, mesh=mesh, preserve_existing_shardings=False)
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 306, in infer_resource_partitions
    return htu.tree_map(to_sharding, tree, pspecs)
  File "/opt/levanter/haliax/src/haliax/tree_util.py", line 28, in tree_map
    return jax.tree.map(fn, tree, *rest, is_leaf=is_leaf)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/jax/_src/tree.py", line 155, in map
    return tree_util.tree_map(f, tree, *rest, is_leaf=is_leaf)
  File "/opt/levanter/haliax/src/haliax/partitioning.py", line 304, in to_sharding
    return NamedSharding(mesh, spec)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/jax/_src/named_sharding.py", line 460, in check_pspec
    _check_unique_resources(spec, "NamedSharding spec", mesh)
  File "/opt/levanter/.venv/lib/python3.10/site-packages/jax/_src/named_sharding.py", line 489, in _check_unique_resources
    raise DuplicateSpecError(
jax._src.named_sharding.DuplicateSpecError: A single NamedSharding spec specification can map every mesh axis to at most one positional dimension, but PartitionSpec('model', None, 'model') has duplicate entries for `model`
